#!groovy

@Library("Infrastructure")

def type = "nodejs"
def product = "em"
def component = "icp"

def secrets = [
  's2s-${env}': [
    secret('microservicekey-em-gw', 'FUNCTIONAL_TEST_CLIENT_S2S_TOKEN')
  ],
  'rpa-${env}': [
    secret('show-oauth2-token', 'FUNCTIONAL_TEST_CLIENT_OAUTH_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

// Vars for Kubernetes
env.TEST_URL= "http://em-icp-aat.service.core-compute-aat.internal"
env.IDAM_API_BASE_URL = 'https://idam-api.aat.platform.hmcts.net'
env.OPEN_ID_API_BASE_URI = 'https://idam-web-public.aat.platform.hmcts.net/o'
env.OIDC_ISSUER_BASE_URI = 'https://forgerock-am.service.core-compute-idam-aat.internal:8443/openam/oauth2/hmcts'
env.IDAM_WEBSHOW_WHITELIST = 'https://em-show-aat.service.core-compute-aat.internal/oauth2/callback'
env.IDAM_S2S_URL= "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.REDIS_HOST= "em-icp-redis-cache-aat.redis.cache.windows.net"
env.REDIS_PORT= 6380

def vaultOverrides = [
        'preview' : 'aat',
        'spreview': 'saat'
]

withPipeline(type, product, component) {
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  disableLegacyDeployment()
}
